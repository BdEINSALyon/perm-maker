package info.augendre.perm_maker.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import info.augendre.perm_maker.actions.*;
import info.augendre.perm_maker.data.Resource;
import info.augendre.perm_maker.listeners.AllowEditListener;
import info.augendre.perm_maker.listeners.ListDoubleClickListener;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ResourceBundle;

public class DefineResourcesDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JList<Resource> resourcesList;
    private JButton addResourceButton;
    private JButton removeResourceButton;
    private JButton editResourceButton;
    private JButton loadResourcesButton;
    private JButton saveResourcesButton;
    private JButton fromDoodleButton;
    private MainPanel mainPanel;

    public DefineResourcesDialog(MainPanel mainPanel) {
        this.mainPanel = mainPanel;
        $$$setupUI$$$();
        this.refreshResourcesList();
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        editResourceButton.setEnabled(false);
        removeResourceButton.setEnabled(false);
        resourcesList.addListSelectionListener(new AllowEditListener(editResourceButton));
        resourcesList.addListSelectionListener(new AllowEditListener(removeResourceButton));

        buttonOK.addActionListener(e -> onOK());
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onOK();
            }
        });
        contentPane.registerKeyboardAction(e -> onOK(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        addResourceButton.addActionListener(new AddResourceAction(this));
        editResourceButton.addActionListener(new EditResourceAction(this));

        removeResourceButton.addActionListener(actionEvent -> {
            if (!resourcesList.isSelectionEmpty()) {
                removeResource(resourcesList.getSelectedValuesList());
            }
        });
        resourcesList.addMouseListener(new ListDoubleClickListener<>(resourcesList, this.mainPanel.getPlanning()));
        loadResourcesButton.addActionListener(new DeserializeResourcesAction(this));
        saveResourcesButton.addActionListener(new SerializeAction<>(mainPanel.getResources()));
        fromDoodleButton.addActionListener(new LoadResourcesFromDoodleAction(this));
    }

    private void refreshResourcesList() {
        resourcesList.setListData(mainPanel.getResources().toArray(new Resource[0]));
    }

    public void addResource(Resource r) {
        mainPanel.getResources().add(r);
        refreshResourcesList();
    }

    public void addAllResources(Collection<Resource> collection) {
        mainPanel.getResources().addAll(collection);
        refreshResourcesList();
    }

    public void resetResources() {
        mainPanel.getResources().clear();
        refreshResourcesList();
    }

    public void removeResource(Resource r) {
        mainPanel.getResources().remove(r);
        refreshResourcesList();
    }

    public void removeResource(java.util.List<Resource> resourcesList) {
        for (Resource r : resourcesList) {
            mainPanel.getResources().remove(r);
        }
        refreshResourcesList();
    }

    public Resource getSelectedResource() {
        return resourcesList.getSelectedValue();
    }

    public java.util.List<Resource> getSelectedResources() {
        return resourcesList.getSelectedValuesList();
    }

    public boolean isSelectionEmpty() {
        return resourcesList.isSelectionEmpty();
    }

    private void onOK() {
// add your code here
        dispose();
    }

    public MainPanel getMainPanel() {
        return mainPanel;
    }

    private void createUIComponents() {
        resourcesList = new JList<>();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(4, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        addResourceButton = new JButton();
        this.$$$loadButtonText$$$(addResourceButton, ResourceBundle.getBundle("strings").getString("resource-add"));
        panel2.add(addResourceButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeResourceButton = new JButton();
        this.$$$loadButtonText$$$(removeResourceButton, ResourceBundle.getBundle("strings").getString("resource-remove"));
        panel2.add(removeResourceButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        editResourceButton = new JButton();
        this.$$$loadButtonText$$$(editResourceButton, ResourceBundle.getBundle("strings").getString("resource-edit"));
        panel2.add(editResourceButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(resourcesList);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        loadResourcesButton = new JButton();
        this.$$$loadButtonText$$$(loadResourcesButton, ResourceBundle.getBundle("strings").getString("resource-load"));
        panel3.add(loadResourcesButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveResourcesButton = new JButton();
        this.$$$loadButtonText$$$(saveResourcesButton, ResourceBundle.getBundle("strings").getString("resource-save"));
        panel3.add(saveResourcesButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fromDoodleButton = new JButton();
        this.$$$loadButtonText$$$(fromDoodleButton, ResourceBundle.getBundle("strings").getString("resource-fromDoodle"));
        panel4.add(fromDoodleButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
